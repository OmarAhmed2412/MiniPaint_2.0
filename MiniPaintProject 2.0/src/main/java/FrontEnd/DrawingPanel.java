 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package FrontEnd;

import BackEnd.Circle;
import BackEnd.DrawingEngine;
import BackEnd.LineSegment;
import BackEnd.Rectangle;
import BackEnd.Shape;
import BackEnd.SublimeShape;
import BackEnd.Triangle;
import java.awt.Graphics;
import java.awt.List;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JComboBox;

/**
 *
 * @author moham
 */
public class DrawingPanel extends javax.swing.JPanel implements DrawingEngine, MouseListener, MouseMotionListener{

    /**
     * Creates new form DrawingPanel
     */
    private ArrayList<Shape> shapes;
    private DrawingFrame frame;
    protected SublimeShape dragged;
    
    
    public DrawingPanel(DrawingFrame frame) {
        initComponents();   
        shapes = new ArrayList<Shape>();
        this.frame = frame;
        addMouseListener(this);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        for (Shape shape : shapes){
            shape.draw(g);
        }
    }
    @Override
    public void addShape(Shape shape) {
        this.shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        this.shapes.remove(shape);
    }

    @Override
    public Shape[] getShapes() {
        return this.shapes.toArray(new Shape[0]);
    }

    @Override
    public void refresh(Graphics canvas) {
        repaint();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        Point clickLocation = e.getPoint();
        for(int i = 0; i < shapes.size(); i++)
        {
            if( ((SublimeShape)shapes.get(i)).contains(clickLocation))
            {
                dragged = (SublimeShape)shapes.get(i);
                frame.getCombobox().setSelectedIndex(i);
                dragged.setDraggingPoint(clickLocation);
                break;
            }
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        dragged = null;
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        Point dragLocation = e.getPoint();
        if(dragged != null){
        dragged.moveTo(dragLocation);
        dragged.setDraggingPoint(dragLocation);
        this.refresh(null);
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        
    }
    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
